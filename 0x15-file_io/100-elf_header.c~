#include "main.h"
/**
 *main - displays the contents of an elf header
 *@argc:arguement count
 *@argv:argurment vector
 *Description: ./elf_header elf_file
 *Return:0 - success
 */
void print_error(char *msg) {
    fprintf(stderr, "Error: %s\n", msg);
    exit(98);
}

void print_elf_header(Elf64_Ehdr *ehdr) {
    char *magic = (char *)ehdr->e_ident;
    printf("  Magic:   ");
    for (int i = 0; i < EI_NIDENT; i++) {
        printf("%02x ", magic[i]);
    }
    printf("\n");
    printf("  Class:                             %s\n", ehdr->e_ident[EI_CLASS] == ELFCLASS64 ? "ELF64" : "ELF32");
    printf("  Data:                              %s\n", ehdr->e_ident[EI_DATA] == ELFDATA2LSB ? "2's complement, little endian" : "2's complement, big endian");
    printf("  Version:                           %d%s\n", ehdr->e_ident[EI_VERSION], ehdr->e_ident[EI_VERSION] == EV_CURRENT ? " (current)" : "");
    printf("  OS/ABI:                            ");
    switch (ehdr->e_ident[EI_OSABI]) {
        case ELFOSABI_SYSV: printf("UNIX System V ABI"); break;
        case ELFOSABI_HPUX: printf("HP-UX ABI"); break;
        case ELFOSABI_NETBSD: printf("NetBSD ABI"); break;
        case ELFOSABI_LINUX: printf("Linux ABI"); break;
        case ELFOSABI_SOLARIS: printf("Solaris ABI"); break;
        case ELFOSABI_IRIX: printf("IRIX ABI"); break;
        case ELFOSABI_FREEBSD: printf("FreeBSD ABI"); break;
        case ELFOSABI_TRU64: printf("Tru64 UNIX ABI"); break;
        case ELFOSABI_ARM: printf("ARM architecture ABI"); break;
        case ELFOSABI_STANDALONE: printf("Standalone (embedded) application"); break;
        default: printf("Unknown ABI"); break;
    }
    printf("\n");
    printf("  ABI Version:                       %d\n", ehdr->e_ident[EI_ABIVERSION]);
    printf("  Type:                              ");
    switch (ehdr->e_type) {
        case ET_NONE: printf("NONE (Unknown type)"); break;
        case ET_REL: printf("REL (Relocatable file)"); break;
        case ET_EXEC: printf("EXEC (Executable file)"); break;
        case ET_DYN: printf("DYN (Shared object file)"); break;
        case ET_CORE: printf("CORE (Core file)"); break;
        default: printf("Unknown type"); break;
    }
    printf("\n");
    printf("  Entry point address:               %lx\n", ehdr->e_entry);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        print_error("Usage: elf_header elf_filename");
    }
    int fd = open(argv[1], O_RDONLY);
    if (fd == -1) {
        print_error("Cannot open file");
    }
    Elf64_Ehdr ehdr;
    ssize_t n = read(fd, &ehdr, sizeof(ehdr));
    if (n != sizeof(ehdr) || memcmp(ehdr.e_ident, ELFMAG, SELFMAG) != 0) {
        print_error("Not an ELF file");
    }
    print_elf_header(&ehdr);
    return 0
